from rest_framework.decorators import api_view, authentication_classes, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import SessionAuthentication
from rest_framework import status
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from django.contrib.auth.models import User

from planner.models import Goal
from .serializers import GoalSerializer
from .authentication import MasterKeyAuth


# ===============================
# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π
# ===============================

@api_view(['GET'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def goals_list(request):
    """
    üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π.
    üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
        ‚Ä¢ –ß–µ—Ä–µ–∑ API-–∫–ª—é—á (–∑–∞–≥–æ–ª–æ–≤–æ–∫ X-API-KEY –∏–ª–∏ ?api_key=)
        ‚Ä¢ –ß–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –Ω–∞ —Å–∞–π—Ç)
    üî∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Ü–µ–ª–∏, –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏.
    """
    user = request.user

    if user.is_superuser:
        goals = Goal.objects.all().order_by('-datetime')
    else:
        goals = Goal.objects.filter(user=user).order_by('-datetime')

    serializer = GoalSerializer(goals, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)


# ===============================
# ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
# ===============================

@api_view(['POST'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def create_goal(request):
    serializer = GoalSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save(user=request.user)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ===============================
# üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
# ===============================

@api_view(['GET'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def goal_detail(request, goal_id):
    user = request.user

    if user.is_superuser:
        goal = get_object_or_404(Goal, id=goal_id)
    else:
        goal = get_object_or_404(Goal, id=goal_id, user=user)

    serializer = GoalSerializer(goal)
    return Response(serializer.data, status=status.HTTP_200_OK)


# ===============================
# ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
# ===============================

@api_view(['PUT', 'PATCH'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def update_goal(request, goal_id):
    user = request.user

    if user.is_superuser:
        goal = get_object_or_404(Goal, id=goal_id)
    else:
        goal = get_object_or_404(Goal, id=goal_id, user=user)

    serializer = GoalSerializer(goal, data=request.data, partial=True)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ===============================
# üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
# ===============================

@api_view(['DELETE'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def delete_goal(request, goal_id):
    user = request.user

    if user.is_superuser:
        goal = get_object_or_404(Goal, id=goal_id)
    else:
        goal = get_object_or_404(Goal, id=goal_id, user=user)

    goal.delete()
    return Response({'detail': '–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞'}, status=status.HTTP_204_NO_CONTENT)


# ===============================
# üî∏ –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

@api_view(['GET'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def all_goals(request):
    """üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not request.user.is_superuser:
        return Response(
            {'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'},
            status=status.HTTP_403_FORBIDDEN
        )
    goals = Goal.objects.all().order_by('-datetime')
    serializer = GoalSerializer(goals, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)


@api_view(['GET'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def all_users(request):
    """üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not request.user.is_superuser:
        return Response(
            {'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'},
            status=status.HTTP_403_FORBIDDEN
        )
    users = User.objects.all().values(
        'id', 'username', 'is_staff', 'is_superuser', 'date_joined'
    )
    return Response(list(users), status=status.HTTP_200_OK)


# ===============================
# üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ===============================

@api_view(['GET'])
@authentication_classes([MasterKeyAuth, SessionAuthentication])
@permission_classes([IsAuthenticated])
def user_detail(request, user_id):
    """üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö)"""
    user = request.user

    if user.is_superuser:
        target_user = get_object_or_404(User, id=user_id)
    else:
        target_user = get_object_or_404(User, id=user.id)

    data = {
        "id": target_user.id,
        "username": target_user.username,
        "is_staff": target_user.is_staff,
        "is_superuser": target_user.is_superuser,
        "date_joined": target_user.date_joined,
    }
    return Response(data, status=status.HTTP_200_OK)
