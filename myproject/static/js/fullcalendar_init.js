document.addEventListener('DOMContentLoaded', function() {
  const calendarEl = document.getElementById('main-calendar');
  if (!calendarEl) return;

  // === tooltip (–Ω–∞ –±—É–¥—É—â–µ–µ) ===
  const tooltip = document.createElement("div");
  tooltip.className = "holiday-tooltip";
  document.body.appendChild(tooltip);

  // üß© –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
  let isCreatingGoal = false;

  // === –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    selectable: true,
    locale: 'ru',
    firstDay: 1,

    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek,timeGridDay'
    },

    buttonText: {
      today: '–°–µ–≥–æ–¥–Ω—è',
      month: '–ú–µ—Å—è—Ü',
      week: '–ù–µ–¥–µ–ª—è',
      day: '–î–µ–Ω—å'
    },

    eventTimeFormat: { 
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    },

    // === –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π ===
    events: function(fetchInfo, successCallback, failureCallback) {
      fetch("/api/goals/")
        .then(response => response.json())
        .then(data => {
          const events = data.map(goal => ({
            id: goal.id,
            title: goal.title,
            description: goal.description,
            start: goal.datetime,
            className: goal.status || "default"
          }));
          successCallback(events);
        })
        .catch(error => failureCallback(error));
    },

    // === –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–±—ã—Ç–∏—è ===
    eventContent: function(arg) {
      const viewType = arg.view.type;
      if (viewType === "dayGridMonth") {
        return {
          html: `
            <div class="fc-event-title-custom">
              ${arg.timeText ? `<span class="fc-time">${arg.timeText}</span>` : ""}
              <span class="fc-title">${arg.event.title}</span>
            </div>
          `
        };
      }
      return {
        html: `<div class="fc-event-title-custom">${arg.event.title}</div>`
      };
    },

// === –∫–ª–∏–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É ===
dateClick: function(info) {
  if (isCreatingGoal) return;
  isCreatingGoal = true;

  if (typeof openGoalModalWithDate === "function") {
    let clickedDate;

    // üß† –ù–∞ –ü–ö FullCalendar –æ—Ç–¥–∞—ë—Ç info.date (Date), –∞ –Ω–∞ –º–æ–±–∏–ª–∫–µ info.dateStr (string)
    if (info.date instanceof Date) {
      clickedDate = info.date.toISOString();
    } else if (typeof info.dateStr === "string") {
      clickedDate = info.dateStr.includes("T")
        ? info.dateStr
        : info.dateStr + "T09:00:00";
    }

    if (clickedDate) {
      openGoalModalWithDate(clickedDate);
    } else {
      console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É:", info);
    }
  }

  setTimeout(() => isCreatingGoal = false, 800);
},

select: function(info) {
  if (isCreatingGoal) return;
  isCreatingGoal = true;

  if (typeof openGoalModalWithDate === "function") {
    let selectedDate;

    if (info.start instanceof Date) {
      selectedDate = info.start.toISOString();
    } else if (typeof info.startStr === "string") {
      selectedDate = info.startStr.includes("T")
        ? info.startStr
        : info.startStr + "T09:00:00";
    }

    if (selectedDate) {
      openGoalModalWithDate(selectedDate);
    } else {
      console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω:", info);
    }
  }

  setTimeout(() => isCreatingGoal = false, 800);
},

    // === –∫–ª–∏–∫ –ø–æ —Å–æ–±—ã—Ç–∏—é ===
    eventClick: function(info) {
      if (typeof openGoalModalForEdit === "function") {
        openGoalModalForEdit({
          id: info.event.id,
          title: info.event.title,
          description: info.event.extendedProps?.description || "",
          start: info.event.startStr,
          status: info.event.classNames[0] || "default"
        });
      }
    }
  });

  // === —Ä–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
  calendar.render();
  window.calendar = calendar;
});
